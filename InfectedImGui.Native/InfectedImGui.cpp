// This file was automatically generated by Biohazrd and should not be modified by hand!
#include "../external/imgui/imgui.h"

#pragma comment(linker, "/export:??AImVec2@@QEBAM_K@Z")
#pragma comment(linker, "/export:??AImVec2@@QEAAAEAM_K@Z")
#pragma comment(linker, "/export:?SelectAll@ImGuiInputTextCallbackData@@QEAAXXZ")
#pragma comment(linker, "/export:?ClearSelection@ImGuiInputTextCallbackData@@QEAAXXZ")
#pragma comment(linker, "/export:?HasSelection@ImGuiInputTextCallbackData@@QEBA_NXZ")
#pragma comment(linker, "/export:?Clear@ImGuiPayload@@QEAAXXZ")
#pragma comment(linker, "/export:?IsDataType@ImGuiPayload@@QEBA_NPEBD@Z")
#pragma comment(linker, "/export:?IsPreview@ImGuiPayload@@QEBA_NXZ")
#pragma comment(linker, "/export:?IsDelivery@ImGuiPayload@@QEBA_NXZ")
#pragma comment(linker, "/export:??BImGuiOnceUponAFrame@@QEBA_NXZ")
#pragma comment(linker, "/export:?Clear@ImGuiTextFilter@@QEAAXXZ")
#pragma comment(linker, "/export:?IsActive@ImGuiTextFilter@@QEBA_NXZ")
#pragma comment(linker, "/export:?empty@ImGuiTextRange@ImGuiTextFilter@@QEBA_NXZ")
#pragma comment(linker, "/export:??AImGuiTextBuffer@@QEBADH@Z")
#pragma comment(linker, "/export:?begin@ImGuiTextBuffer@@QEBAPEBDXZ")
#pragma comment(linker, "/export:?end@ImGuiTextBuffer@@QEBAPEBDXZ")
#pragma comment(linker, "/export:?size@ImGuiTextBuffer@@QEBAHXZ")
#pragma comment(linker, "/export:?empty@ImGuiTextBuffer@@QEBA_NXZ")
#pragma comment(linker, "/export:?clear@ImGuiTextBuffer@@QEAAXXZ")
#pragma comment(linker, "/export:?reserve@ImGuiTextBuffer@@QEAAXH@Z")
#pragma comment(linker, "/export:?c_str@ImGuiTextBuffer@@QEBAPEBDXZ")
#pragma comment(linker, "/export:?Clear@ImGuiStorage@@QEAAXXZ")
#pragma comment(linker, "/export:??BImColor@@QEBAIXZ")
#pragma comment(linker, "/export:??BImColor@@QEBA?AUImVec4@@XZ")
#pragma comment(linker, "/export:?SetHSV@ImColor@@QEAAXMMMM@Z")
#pragma comment(linker, "/export:?HSV@ImColor@@SA?AU1@MMMM@Z")
#pragma comment(linker, "/export:?Clear@ImDrawListSplitter@@QEAAXXZ")
#pragma comment(linker, "/export:?GetClipRectMin@ImDrawList@@QEBA?AUImVec2@@XZ")
#pragma comment(linker, "/export:?GetClipRectMax@ImDrawList@@QEBA?AUImVec2@@XZ")
#pragma comment(linker, "/export:?PathClear@ImDrawList@@QEAAXXZ")
#pragma comment(linker, "/export:?PathLineTo@ImDrawList@@QEAAXAEBUImVec2@@@Z")
#pragma comment(linker, "/export:?PathLineToMergeDuplicate@ImDrawList@@QEAAXAEBUImVec2@@@Z")
#pragma comment(linker, "/export:?PathFillConvex@ImDrawList@@QEAAXI@Z")
#pragma comment(linker, "/export:?PathStroke@ImDrawList@@QEAAXI_NM@Z")
#pragma comment(linker, "/export:?ChannelsSplit@ImDrawList@@QEAAXH@Z")
#pragma comment(linker, "/export:?ChannelsMerge@ImDrawList@@QEAAXXZ")
#pragma comment(linker, "/export:?ChannelsSetCurrent@ImDrawList@@QEAAXH@Z")
#pragma comment(linker, "/export:?PrimWriteVtx@ImDrawList@@QEAAXAEBUImVec2@@0I@Z")
#pragma comment(linker, "/export:?PrimWriteIdx@ImDrawList@@QEAAXG@Z")
#pragma comment(linker, "/export:?PrimVtx@ImDrawList@@QEAAXAEBUImVec2@@0I@Z")
#pragma comment(linker, "/export:?Clear@ImDrawData@@QEAAXXZ")
#pragma comment(linker, "/export:?Clear@ImFontGlyphRangesBuilder@@QEAAXXZ")
#pragma comment(linker, "/export:?GetBit@ImFontGlyphRangesBuilder@@QEBA_N_K@Z")
#pragma comment(linker, "/export:?SetBit@ImFontGlyphRangesBuilder@@QEAAX_K@Z")
#pragma comment(linker, "/export:?AddChar@ImFontGlyphRangesBuilder@@QEAAXG@Z")
#pragma comment(linker, "/export:?IsPacked@ImFontAtlasCustomRect@@QEBA_NXZ")
#pragma comment(linker, "/export:?IsBuilt@ImFontAtlas@@QEBA_NXZ")
#pragma comment(linker, "/export:?SetTexID@ImFontAtlas@@QEAAXPEAX@Z")
#pragma comment(linker, "/export:?GetCustomRectByIndex@ImFontAtlas@@QEAAPEAUImFontAtlasCustomRect@@H@Z")
#pragma comment(linker, "/export:?GetCharAdvance@ImFont@@QEBAMG@Z")
#pragma comment(linker, "/export:?IsLoaded@ImFont@@QEBA_NXZ")
#pragma comment(linker, "/export:?GetDebugName@ImFont@@QEBAPEBDXZ")
#pragma comment(linker, "/export:?GetCenter@ImGuiViewport@@QEBA?AUImVec2@@XZ")
#pragma comment(linker, "/export:?GetWorkCenter@ImGuiViewport@@QEBA?AUImVec2@@XZ")
#pragma comment(linker, "/export:??2@YAPEAX_KUImNewWrapper@@PEAX@Z")
#pragma comment(linker, "/export:??3@YAXPEAXUImNewWrapper@@0@Z")

namespace ____BiohazrdInlineExportHelpers
{
    float (ImVec2::* unused0)(unsigned long long) const = &ImVec2::operator[];
    float & (ImVec2::* unused1)(unsigned long long) = &ImVec2::operator[];
    void (ImGuiInputTextCallbackData::* unused2)() = &ImGuiInputTextCallbackData::SelectAll;
    void (ImGuiInputTextCallbackData::* unused3)() = &ImGuiInputTextCallbackData::ClearSelection;
    bool (ImGuiInputTextCallbackData::* unused4)() const = &ImGuiInputTextCallbackData::HasSelection;
    void (ImGuiPayload::* unused5)() = &ImGuiPayload::Clear;
    bool (ImGuiPayload::* unused6)(const char *) const = &ImGuiPayload::IsDataType;
    bool (ImGuiPayload::* unused7)() const = &ImGuiPayload::IsPreview;
    bool (ImGuiPayload::* unused8)() const = &ImGuiPayload::IsDelivery;
    bool (ImGuiOnceUponAFrame::* unused9)() const = &ImGuiOnceUponAFrame::operator bool;
    void (ImGuiTextFilter::* unused10)() = &ImGuiTextFilter::Clear;
    bool (ImGuiTextFilter::* unused11)() const = &ImGuiTextFilter::IsActive;
    bool (ImGuiTextFilter::ImGuiTextRange::* unused12)() const = &ImGuiTextFilter::ImGuiTextRange::empty;
    char (ImGuiTextBuffer::* unused13)(int) const = &ImGuiTextBuffer::operator[];
    const char * (ImGuiTextBuffer::* unused14)() const = &ImGuiTextBuffer::begin;
    const char * (ImGuiTextBuffer::* unused15)() const = &ImGuiTextBuffer::end;
    int (ImGuiTextBuffer::* unused16)() const = &ImGuiTextBuffer::size;
    bool (ImGuiTextBuffer::* unused17)() const = &ImGuiTextBuffer::empty;
    void (ImGuiTextBuffer::* unused18)() = &ImGuiTextBuffer::clear;
    void (ImGuiTextBuffer::* unused19)(int) = &ImGuiTextBuffer::reserve;
    const char * (ImGuiTextBuffer::* unused20)() const = &ImGuiTextBuffer::c_str;
    void (ImGuiStorage::* unused21)() = &ImGuiStorage::Clear;
    unsigned int (ImColor::* unused22)() const = &ImColor::operator unsigned int;
    ImVec4 (ImColor::* unused23)() const = &ImColor::operator ImVec4;
    void (ImColor::* unused24)(float, float, float, float) = &ImColor::SetHSV;
    ImColor (*unused25)(float, float, float, float) = &ImColor::HSV;
    void (ImDrawListSplitter::* unused26)() = &ImDrawListSplitter::Clear;
    ImVec2 (ImDrawList::* unused27)() const = &ImDrawList::GetClipRectMin;
    ImVec2 (ImDrawList::* unused28)() const = &ImDrawList::GetClipRectMax;
    void (ImDrawList::* unused29)() = &ImDrawList::PathClear;
    void (ImDrawList::* unused30)(const ImVec2 &) = &ImDrawList::PathLineTo;
    void (ImDrawList::* unused31)(const ImVec2 &) = &ImDrawList::PathLineToMergeDuplicate;
    void (ImDrawList::* unused32)(unsigned int) = &ImDrawList::PathFillConvex;
    void (ImDrawList::* unused33)(unsigned int, bool, float) = &ImDrawList::PathStroke;
    void (ImDrawList::* unused34)(int) = &ImDrawList::ChannelsSplit;
    void (ImDrawList::* unused35)() = &ImDrawList::ChannelsMerge;
    void (ImDrawList::* unused36)(int) = &ImDrawList::ChannelsSetCurrent;
    void (ImDrawList::* unused37)(const ImVec2 &, const ImVec2 &, unsigned int) = &ImDrawList::PrimWriteVtx;
    void (ImDrawList::* unused38)(unsigned short) = &ImDrawList::PrimWriteIdx;
    void (ImDrawList::* unused39)(const ImVec2 &, const ImVec2 &, unsigned int) = &ImDrawList::PrimVtx;
    void (ImDrawData::* unused40)() = &ImDrawData::Clear;
    void (ImFontGlyphRangesBuilder::* unused41)() = &ImFontGlyphRangesBuilder::Clear;
    bool (ImFontGlyphRangesBuilder::* unused42)(unsigned long long) const = &ImFontGlyphRangesBuilder::GetBit;
    void (ImFontGlyphRangesBuilder::* unused43)(unsigned long long) = &ImFontGlyphRangesBuilder::SetBit;
    void (ImFontGlyphRangesBuilder::* unused44)(unsigned short) = &ImFontGlyphRangesBuilder::AddChar;
    bool (ImFontAtlasCustomRect::* unused45)() const = &ImFontAtlasCustomRect::IsPacked;
    bool (ImFontAtlas::* unused46)() const = &ImFontAtlas::IsBuilt;
    void (ImFontAtlas::* unused47)(void *) = &ImFontAtlas::SetTexID;
    ImFontAtlasCustomRect * (ImFontAtlas::* unused48)(int) = &ImFontAtlas::GetCustomRectByIndex;
    float (ImFont::* unused49)(unsigned short) const = &ImFont::GetCharAdvance;
    bool (ImFont::* unused50)() const = &ImFont::IsLoaded;
    const char * (ImFont::* unused51)() const = &ImFont::GetDebugName;
    ImVec2 (ImGuiViewport::* unused52)() const = &ImGuiViewport::GetCenter;
    ImVec2 (ImGuiViewport::* unused53)() const = &ImGuiViewport::GetWorkCenter;
    void * (*unused54)(unsigned long long, ImNewWrapper, void *) = &operator new;
    void (*unused55)(void *, ImNewWrapper, void *) = &operator delete;
}

namespace ____BiohazrdInlineExportHelpers
{
    struct __BiohazrdNewHelper { };
}

inline void* operator new(size_t, ____BiohazrdInlineExportHelpers::__BiohazrdNewHelper, void* _this) { return _this; }
inline void operator delete(void*, ____BiohazrdInlineExportHelpers::__BiohazrdNewHelper, void*) { }

#pragma warning(disable: 4190) // C-linkage function returning C++ type
extern "C" namespace ____BiohazrdInlineExportHelpers
{
    __declspec(dllexport) ImVec2* __InlineHelper0(ImVec2* _this)
    { return new (__BiohazrdNewHelper(), _this) ImVec2(); }

    __declspec(dllexport) ImVec2* __InlineHelper1(ImVec2* _this, float _0, float _1)
    { return new (__BiohazrdNewHelper(), _this) ImVec2(_0, _1); }

    __declspec(dllexport) ImVec4* __InlineHelper2(ImVec4* _this)
    { return new (__BiohazrdNewHelper(), _this) ImVec4(); }

    __declspec(dllexport) ImVec4* __InlineHelper3(ImVec4* _this, float _0, float _1, float _2, float _3)
    { return new (__BiohazrdNewHelper(), _this) ImVec4(_0, _1, _2, _3); }

    __declspec(dllexport) ImGuiWindowClass* __InlineHelper4(ImGuiWindowClass* _this)
    { return new (__BiohazrdNewHelper(), _this) ImGuiWindowClass(); }

    __declspec(dllexport) ImGuiPayload* __InlineHelper5(ImGuiPayload* _this)
    { return new (__BiohazrdNewHelper(), _this) ImGuiPayload(); }

    __declspec(dllexport) ImGuiTableColumnSortSpecs* __InlineHelper6(ImGuiTableColumnSortSpecs* _this)
    { return new (__BiohazrdNewHelper(), _this) ImGuiTableColumnSortSpecs(); }

    __declspec(dllexport) ImGuiTableSortSpecs* __InlineHelper7(ImGuiTableSortSpecs* _this)
    { return new (__BiohazrdNewHelper(), _this) ImGuiTableSortSpecs(); }

    __declspec(dllexport) ImGuiOnceUponAFrame* __InlineHelper8(ImGuiOnceUponAFrame* _this)
    { return new (__BiohazrdNewHelper(), _this) ImGuiOnceUponAFrame(); }

    __declspec(dllexport) ImGuiTextFilter::ImGuiTextRange* __InlineHelper9(ImGuiTextFilter::ImGuiTextRange* _this)
    { return new (__BiohazrdNewHelper(), _this) ImGuiTextFilter::ImGuiTextRange(); }

    __declspec(dllexport) ImGuiTextFilter::ImGuiTextRange* __InlineHelper10(ImGuiTextFilter::ImGuiTextRange* _this, const char *_0, const char *_1)
    { return new (__BiohazrdNewHelper(), _this) ImGuiTextFilter::ImGuiTextRange(_0, _1); }

    __declspec(dllexport) ImGuiTextBuffer* __InlineHelper11(ImGuiTextBuffer* _this)
    { return new (__BiohazrdNewHelper(), _this) ImGuiTextBuffer(); }

    __declspec(dllexport) ImGuiStorage::ImGuiStoragePair* __InlineHelper12(ImGuiStorage::ImGuiStoragePair* _this, unsigned int _0, int _1)
    { return new (__BiohazrdNewHelper(), _this) ImGuiStorage::ImGuiStoragePair(_0, _1); }

    __declspec(dllexport) ImGuiStorage::ImGuiStoragePair* __InlineHelper13(ImGuiStorage::ImGuiStoragePair* _this, unsigned int _0, float _1)
    { return new (__BiohazrdNewHelper(), _this) ImGuiStorage::ImGuiStoragePair(_0, _1); }

    __declspec(dllexport) ImGuiStorage::ImGuiStoragePair* __InlineHelper14(ImGuiStorage::ImGuiStoragePair* _this, unsigned int _0, void *_1)
    { return new (__BiohazrdNewHelper(), _this) ImGuiStorage::ImGuiStoragePair(_0, _1); }

    __declspec(dllexport) ImColor* __InlineHelper15(ImColor* _this)
    { return new (__BiohazrdNewHelper(), _this) ImColor(); }

    __declspec(dllexport) ImColor* __InlineHelper16(ImColor* _this, int _0, int _1, int _2, int _3)
    { return new (__BiohazrdNewHelper(), _this) ImColor(_0, _1, _2, _3); }

    __declspec(dllexport) ImColor* __InlineHelper17(ImColor* _this, unsigned int _0)
    { return new (__BiohazrdNewHelper(), _this) ImColor(_0); }

    __declspec(dllexport) ImColor* __InlineHelper18(ImColor* _this, float _0, float _1, float _2, float _3)
    { return new (__BiohazrdNewHelper(), _this) ImColor(_0, _1, _2, _3); }

    __declspec(dllexport) ImColor* __InlineHelper19(ImColor* _this, const ImVec4 &_0)
    { return new (__BiohazrdNewHelper(), _this) ImColor(_0); }

    __declspec(dllexport) ImDrawCmd* __InlineHelper20(ImDrawCmd* _this)
    { return new (__BiohazrdNewHelper(), _this) ImDrawCmd(); }

    __declspec(dllexport) ImDrawListSplitter* __InlineHelper21(ImDrawListSplitter* _this)
    { return new (__BiohazrdNewHelper(), _this) ImDrawListSplitter(); }

    __declspec(dllexport) void __InlineHelper22(ImDrawListSplitter* _this)
    { _this->~ImDrawListSplitter(); }

    __declspec(dllexport) ImDrawList* __InlineHelper23(ImDrawList* _this, const ImDrawListSharedData *_0)
    { return new (__BiohazrdNewHelper(), _this) ImDrawList(_0); }

    __declspec(dllexport) void __InlineHelper24(ImDrawList* _this)
    { _this->~ImDrawList(); }

    __declspec(dllexport) ImDrawData* __InlineHelper25(ImDrawData* _this)
    { return new (__BiohazrdNewHelper(), _this) ImDrawData(); }

    __declspec(dllexport) ImFontGlyphRangesBuilder* __InlineHelper26(ImFontGlyphRangesBuilder* _this)
    { return new (__BiohazrdNewHelper(), _this) ImFontGlyphRangesBuilder(); }

    __declspec(dllexport) ImFontAtlasCustomRect* __InlineHelper27(ImFontAtlasCustomRect* _this)
    { return new (__BiohazrdNewHelper(), _this) ImFontAtlasCustomRect(); }

    __declspec(dllexport) ImGuiViewport* __InlineHelper28(ImGuiViewport* _this)
    { return new (__BiohazrdNewHelper(), _this) ImGuiViewport(); }

    __declspec(dllexport) void __InlineHelper29(ImGuiViewport* _this)
    { _this->~ImGuiViewport(); }

    __declspec(dllexport) ImGuiPlatformIO* __InlineHelper30(ImGuiPlatformIO* _this)
    { return new (__BiohazrdNewHelper(), _this) ImGuiPlatformIO(); }

    __declspec(dllexport) ImGuiPlatformMonitor* __InlineHelper31(ImGuiPlatformMonitor* _this)
    { return new (__BiohazrdNewHelper(), _this) ImGuiPlatformMonitor(); }
}
