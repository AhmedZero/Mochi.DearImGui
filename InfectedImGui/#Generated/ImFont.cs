// <auto-generated>
// This file was automatically generated by Biohazrd and should not be modified by hand!
// </auto-generated>
#nullable enable
using InfectedImGui.Infrastructure;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace InfectedImGui
{
    [StructLayout(LayoutKind.Explicit, Size = 112)]
    public unsafe partial struct ImFont
    {
        [FieldOffset(0)] public ImVector<float> IndexAdvanceX;

        [FieldOffset(16)] public float FallbackAdvanceX;

        [FieldOffset(20)] public float FontSize;

        [FieldOffset(24)] public ImVector<ushort> IndexLookup;

        [FieldOffset(40)] public ImVector<ImFontGlyph> Glyphs;

        [FieldOffset(56)] public ImFontGlyph* FallbackGlyph;

        [FieldOffset(64)] public ImFontAtlas* ContainerAtlas;

        [FieldOffset(72)] public ImFontConfig* ConfigData;

        [FieldOffset(80)] public short ConfigDataCount;

        [FieldOffset(82)] public char FallbackChar;

        [FieldOffset(84)] public char EllipsisChar;

        [FieldOffset(86)] [MarshalAs(UnmanagedType.I1)] public bool DirtyLookupTables;

        [FieldOffset(88)] public float Scale;

        [FieldOffset(92)] public float Ascent;

        [FieldOffset(96)] public float Descent;

        [FieldOffset(100)] public int MetricsTotalSurface;

        [FieldOffset(104)] public ConstantArray_ImU8_2 Used4kPagesMap;

        [DllImport("libInfectedImGui.Native.so", CallingConvention = CallingConvention.Cdecl, EntryPoint = "_ZN6ImFontC1Ev", ExactSpelling = true)]
        private static extern void Constructor_PInvoke(ImFont* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Constructor()
        {
            fixed (ImFont* @this = &this)
            { Constructor_PInvoke(@this); }
        }

        [DllImport("libInfectedImGui.Native.so", CallingConvention = CallingConvention.Cdecl, EntryPoint = "_ZN6ImFontD2Ev", ExactSpelling = true)]
        private static extern void Destructor_PInvoke(ImFont* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Destructor()
        {
            fixed (ImFont* @this = &this)
            { Destructor_PInvoke(@this); }
        }

        [DllImport("libInfectedImGui.Native.so", CallingConvention = CallingConvention.Cdecl, EntryPoint = "_ZNK6ImFont9FindGlyphEt", ExactSpelling = true)]
        private static extern ImFontGlyph* FindGlyph_PInvoke(ImFont* @this, char c);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ImFontGlyph* FindGlyph(char c)
        {
            fixed (ImFont* @this = &this)
            { return FindGlyph_PInvoke(@this, c); }
        }

        [DllImport("libInfectedImGui.Native.so", CallingConvention = CallingConvention.Cdecl, EntryPoint = "_ZNK6ImFont19FindGlyphNoFallbackEt", ExactSpelling = true)]
        private static extern ImFontGlyph* FindGlyphNoFallback_PInvoke(ImFont* @this, char c);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ImFontGlyph* FindGlyphNoFallback(char c)
        {
            fixed (ImFont* @this = &this)
            { return FindGlyphNoFallback_PInvoke(@this, c); }
        }

        [DllImport("libInfectedImGui.Native.so", CallingConvention = CallingConvention.Cdecl, EntryPoint = "_ZNK6ImFont14GetCharAdvanceEt", ExactSpelling = true)]
        private static extern float GetCharAdvance_PInvoke(ImFont* @this, char c);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public float GetCharAdvance(char c)
        {
            fixed (ImFont* @this = &this)
            { return GetCharAdvance_PInvoke(@this, c); }
        }

        [DllImport("libInfectedImGui.Native.so", CallingConvention = CallingConvention.Cdecl, EntryPoint = "_ZNK6ImFont8IsLoadedEv", ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.I1)]
        private static extern bool IsLoaded_PInvoke(ImFont* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool IsLoaded()
        {
            fixed (ImFont* @this = &this)
            { return IsLoaded_PInvoke(@this); }
        }

        [DllImport("libInfectedImGui.Native.so", CallingConvention = CallingConvention.Cdecl, EntryPoint = "_ZNK6ImFont12GetDebugNameEv", ExactSpelling = true)]
        private static extern byte* GetDebugName_PInvoke(ImFont* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte* GetDebugName()
        {
            fixed (ImFont* @this = &this)
            { return GetDebugName_PInvoke(@this); }
        }

        [DllImport("libInfectedImGui.Native.so", CallingConvention = CallingConvention.Cdecl, EntryPoint = "_ZNK6ImFont13CalcTextSizeAEfffPKcS1_PS1_", ExactSpelling = true)]
        private static extern ImVec2 CalcTextSizeA_PInvoke(ImFont* @this, float size, float max_width, float wrap_width, byte* text_begin, byte* text_end, byte** remaining);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ImVec2 CalcTextSizeA(float size, float max_width, float wrap_width, byte* text_begin, byte* text_end = null, byte** remaining = null)
        {
            fixed (ImFont* @this = &this)
            { return CalcTextSizeA_PInvoke(@this, size, max_width, wrap_width, text_begin, text_end, remaining); }
        }

        [DllImport("libInfectedImGui.Native.so", CallingConvention = CallingConvention.Cdecl, EntryPoint = "_ZNK6ImFont21CalcWordWrapPositionAEfPKcS1_f", ExactSpelling = true)]
        private static extern byte* CalcWordWrapPositionA_PInvoke(ImFont* @this, float scale, byte* text, byte* text_end, float wrap_width);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public byte* CalcWordWrapPositionA(float scale, byte* text, byte* text_end, float wrap_width)
        {
            fixed (ImFont* @this = &this)
            { return CalcWordWrapPositionA_PInvoke(@this, scale, text, text_end, wrap_width); }
        }

        [DllImport("libInfectedImGui.Native.so", CallingConvention = CallingConvention.Cdecl, EntryPoint = "_ZNK6ImFont10RenderCharEP10ImDrawListf6ImVec2jt", ExactSpelling = true)]
        private static extern void RenderChar_PInvoke(ImFont* @this, ImDrawList* draw_list, float size, ImVec2 pos, uint col, char c);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void RenderChar(ImDrawList* draw_list, float size, ImVec2 pos, uint col, char c)
        {
            fixed (ImFont* @this = &this)
            { RenderChar_PInvoke(@this, draw_list, size, pos, col, c); }
        }

        [DllImport("libInfectedImGui.Native.so", CallingConvention = CallingConvention.Cdecl, EntryPoint = "_ZNK6ImFont10RenderTextEP10ImDrawListf6ImVec2jRK6ImVec4PKcS7_fb", ExactSpelling = true)]
        private static extern void RenderText_PInvoke(ImFont* @this, ImDrawList* draw_list, float size, ImVec2 pos, uint col, ImVec4* clip_rect, byte* text_begin, byte* text_end, float wrap_width, [MarshalAs(UnmanagedType.I1)] bool cpu_fine_clip);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void RenderText(ImDrawList* draw_list, float size, ImVec2 pos, uint col, ImVec4* clip_rect, byte* text_begin, byte* text_end, float wrap_width = 0f, bool cpu_fine_clip = false)
        {
            fixed (ImFont* @this = &this)
            { RenderText_PInvoke(@this, draw_list, size, pos, col, clip_rect, text_begin, text_end, wrap_width, cpu_fine_clip); }
        }

        [DllImport("libInfectedImGui.Native.so", CallingConvention = CallingConvention.Cdecl, EntryPoint = "_ZN6ImFont16BuildLookupTableEv", ExactSpelling = true)]
        private static extern void BuildLookupTable_PInvoke(ImFont* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void BuildLookupTable()
        {
            fixed (ImFont* @this = &this)
            { BuildLookupTable_PInvoke(@this); }
        }

        [DllImport("libInfectedImGui.Native.so", CallingConvention = CallingConvention.Cdecl, EntryPoint = "_ZN6ImFont15ClearOutputDataEv", ExactSpelling = true)]
        private static extern void ClearOutputData_PInvoke(ImFont* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void ClearOutputData()
        {
            fixed (ImFont* @this = &this)
            { ClearOutputData_PInvoke(@this); }
        }

        [DllImport("libInfectedImGui.Native.so", CallingConvention = CallingConvention.Cdecl, EntryPoint = "_ZN6ImFont9GrowIndexEi", ExactSpelling = true)]
        private static extern void GrowIndex_PInvoke(ImFont* @this, int new_size);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void GrowIndex(int new_size)
        {
            fixed (ImFont* @this = &this)
            { GrowIndex_PInvoke(@this, new_size); }
        }

        [DllImport("libInfectedImGui.Native.so", CallingConvention = CallingConvention.Cdecl, EntryPoint = "_ZN6ImFont8AddGlyphEPK12ImFontConfigtfffffffff", ExactSpelling = true)]
        private static extern void AddGlyph_PInvoke(ImFont* @this, ImFontConfig* src_cfg, char c, float x0, float y0, float x1, float y1, float u0, float v0, float u1, float v1, float advance_x);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void AddGlyph(ImFontConfig* src_cfg, char c, float x0, float y0, float x1, float y1, float u0, float v0, float u1, float v1, float advance_x)
        {
            fixed (ImFont* @this = &this)
            { AddGlyph_PInvoke(@this, src_cfg, c, x0, y0, x1, y1, u0, v0, u1, v1, advance_x); }
        }

        [DllImport("libInfectedImGui.Native.so", CallingConvention = CallingConvention.Cdecl, EntryPoint = "_ZN6ImFont12AddRemapCharEttb", ExactSpelling = true)]
        private static extern void AddRemapChar_PInvoke(ImFont* @this, char dst, char src, [MarshalAs(UnmanagedType.I1)] bool overwrite_dst);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void AddRemapChar(char dst, char src, bool overwrite_dst = true)
        {
            fixed (ImFont* @this = &this)
            { AddRemapChar_PInvoke(@this, dst, src, overwrite_dst); }
        }

        [DllImport("libInfectedImGui.Native.so", CallingConvention = CallingConvention.Cdecl, EntryPoint = "_ZN6ImFont15SetGlyphVisibleEtb", ExactSpelling = true)]
        private static extern void SetGlyphVisible_PInvoke(ImFont* @this, char c, [MarshalAs(UnmanagedType.I1)] bool visible);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void SetGlyphVisible(char c, bool visible)
        {
            fixed (ImFont* @this = &this)
            { SetGlyphVisible_PInvoke(@this, c, visible); }
        }

        [DllImport("libInfectedImGui.Native.so", CallingConvention = CallingConvention.Cdecl, EntryPoint = "_ZN6ImFont15SetFallbackCharEt", ExactSpelling = true)]
        private static extern void SetFallbackChar_PInvoke(ImFont* @this, char c);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void SetFallbackChar(char c)
        {
            fixed (ImFont* @this = &this)
            { SetFallbackChar_PInvoke(@this, c); }
        }

        [DllImport("libInfectedImGui.Native.so", CallingConvention = CallingConvention.Cdecl, EntryPoint = "_ZN6ImFont18IsGlyphRangeUnusedEjj", ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.I1)]
        private static extern bool IsGlyphRangeUnused_PInvoke(ImFont* @this, uint c_begin, uint c_last);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool IsGlyphRangeUnused(uint c_begin, uint c_last)
        {
            fixed (ImFont* @this = &this)
            { return IsGlyphRangeUnused_PInvoke(@this, c_begin, c_last); }
        }
    }
}
