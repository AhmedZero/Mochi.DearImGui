// <auto-generated>
// This file was automatically generated by Biohazrd and should not be modified by hand!
// </auto-generated>
#nullable enable
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Explicit, Size = 1160)]
public unsafe partial struct ImFontAtlas
{
    [DllImport("InfectedImGui.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "??0ImFontAtlas@@QEAA@XZ", ExactSpelling = true)]
    private static extern void Constructor_PInvoke(ImFontAtlas* @this);

    [DebuggerStepThrough, DebuggerHidden]
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public unsafe void Constructor()
    {
        fixed (ImFontAtlas* @this = &this)
        { Constructor_PInvoke(@this); }
    }

    [DllImport("InfectedImGui.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "??1ImFontAtlas@@QEAA@XZ", ExactSpelling = true)]
    private static extern void Destructor_PInvoke(ImFontAtlas* @this);

    [DebuggerStepThrough, DebuggerHidden]
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public unsafe void Destructor()
    {
        fixed (ImFontAtlas* @this = &this)
        { Destructor_PInvoke(@this); }
    }

    [DllImport("InfectedImGui.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?AddFont@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z", ExactSpelling = true)]
    private static extern ImFont* AddFont_PInvoke(ImFontAtlas* @this, ImFontConfig* font_cfg);

    [DebuggerStepThrough, DebuggerHidden]
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public unsafe ImFont* AddFont(ImFontConfig* font_cfg)
    {
        fixed (ImFontAtlas* @this = &this)
        { return AddFont_PInvoke(@this, font_cfg); }
    }

    [DllImport("InfectedImGui.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?AddFontDefault@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z", ExactSpelling = true)]
    private static extern ImFont* AddFontDefault_PInvoke(ImFontAtlas* @this, ImFontConfig* font_cfg);

    [DebuggerStepThrough, DebuggerHidden]
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public unsafe ImFont* AddFontDefault(ImFontConfig* font_cfg = null)
    {
        fixed (ImFontAtlas* @this = &this)
        { return AddFontDefault_PInvoke(@this, font_cfg); }
    }

    [DllImport("InfectedImGui.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?AddFontFromFileTTF@ImFontAtlas@@QEAAPEAUImFont@@PEBDMPEBUImFontConfig@@PEBG@Z", ExactSpelling = true)]
    private static extern ImFont* AddFontFromFileTTF_PInvoke(ImFontAtlas* @this, byte* filename, float size_pixels, ImFontConfig* font_cfg, ushort* glyph_ranges);

    [DebuggerStepThrough, DebuggerHidden]
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public unsafe ImFont* AddFontFromFileTTF(byte* filename, float size_pixels, ImFontConfig* font_cfg = null, ushort* glyph_ranges = null)
    {
        fixed (ImFontAtlas* @this = &this)
        { return AddFontFromFileTTF_PInvoke(@this, filename, size_pixels, font_cfg, glyph_ranges); }
    }

    [DllImport("InfectedImGui.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?AddFontFromMemoryTTF@ImFontAtlas@@QEAAPEAUImFont@@PEAXHMPEBUImFontConfig@@PEBG@Z", ExactSpelling = true)]
    private static extern ImFont* AddFontFromMemoryTTF_PInvoke(ImFontAtlas* @this, void* font_data, int font_size, float size_pixels, ImFontConfig* font_cfg, ushort* glyph_ranges);

    [DebuggerStepThrough, DebuggerHidden]
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public unsafe ImFont* AddFontFromMemoryTTF(void* font_data, int font_size, float size_pixels, ImFontConfig* font_cfg = null, ushort* glyph_ranges = null)
    {
        fixed (ImFontAtlas* @this = &this)
        { return AddFontFromMemoryTTF_PInvoke(@this, font_data, font_size, size_pixels, font_cfg, glyph_ranges); }
    }

    [DllImport("InfectedImGui.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?AddFontFromMemoryCompressedTTF@ImFontAtlas@@QEAAPEAUImFont@@PEBXHMPEBUImFontConfig@@PEBG@Z", ExactSpelling = true)]
    private static extern ImFont* AddFontFromMemoryCompressedTTF_PInvoke(ImFontAtlas* @this, void* compressed_font_data, int compressed_font_size, float size_pixels, ImFontConfig* font_cfg, ushort* glyph_ranges);

    [DebuggerStepThrough, DebuggerHidden]
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public unsafe ImFont* AddFontFromMemoryCompressedTTF(void* compressed_font_data, int compressed_font_size, float size_pixels, ImFontConfig* font_cfg = null, ushort* glyph_ranges = null)
    {
        fixed (ImFontAtlas* @this = &this)
        { return AddFontFromMemoryCompressedTTF_PInvoke(@this, compressed_font_data, compressed_font_size, size_pixels, font_cfg, glyph_ranges); }
    }

    [DllImport("InfectedImGui.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?AddFontFromMemoryCompressedBase85TTF@ImFontAtlas@@QEAAPEAUImFont@@PEBDMPEBUImFontConfig@@PEBG@Z", ExactSpelling = true)]
    private static extern ImFont* AddFontFromMemoryCompressedBase85TTF_PInvoke(ImFontAtlas* @this, byte* compressed_font_data_base85, float size_pixels, ImFontConfig* font_cfg, ushort* glyph_ranges);

    [DebuggerStepThrough, DebuggerHidden]
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public unsafe ImFont* AddFontFromMemoryCompressedBase85TTF(byte* compressed_font_data_base85, float size_pixels, ImFontConfig* font_cfg = null, ushort* glyph_ranges = null)
    {
        fixed (ImFontAtlas* @this = &this)
        { return AddFontFromMemoryCompressedBase85TTF_PInvoke(@this, compressed_font_data_base85, size_pixels, font_cfg, glyph_ranges); }
    }

    [DllImport("InfectedImGui.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?ClearInputData@ImFontAtlas@@QEAAXXZ", ExactSpelling = true)]
    private static extern void ClearInputData_PInvoke(ImFontAtlas* @this);

    [DebuggerStepThrough, DebuggerHidden]
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public unsafe void ClearInputData()
    {
        fixed (ImFontAtlas* @this = &this)
        { ClearInputData_PInvoke(@this); }
    }

    [DllImport("InfectedImGui.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?ClearTexData@ImFontAtlas@@QEAAXXZ", ExactSpelling = true)]
    private static extern void ClearTexData_PInvoke(ImFontAtlas* @this);

    [DebuggerStepThrough, DebuggerHidden]
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public unsafe void ClearTexData()
    {
        fixed (ImFontAtlas* @this = &this)
        { ClearTexData_PInvoke(@this); }
    }

    [DllImport("InfectedImGui.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?ClearFonts@ImFontAtlas@@QEAAXXZ", ExactSpelling = true)]
    private static extern void ClearFonts_PInvoke(ImFontAtlas* @this);

    [DebuggerStepThrough, DebuggerHidden]
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public unsafe void ClearFonts()
    {
        fixed (ImFontAtlas* @this = &this)
        { ClearFonts_PInvoke(@this); }
    }

    [DllImport("InfectedImGui.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?Clear@ImFontAtlas@@QEAAXXZ", ExactSpelling = true)]
    private static extern void Clear_PInvoke(ImFontAtlas* @this);

    [DebuggerStepThrough, DebuggerHidden]
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public unsafe void Clear()
    {
        fixed (ImFontAtlas* @this = &this)
        { Clear_PInvoke(@this); }
    }

    [DllImport("InfectedImGui.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?Build@ImFontAtlas@@QEAA_NXZ", ExactSpelling = true)]
    [return: MarshalAs(UnmanagedType.I1)]
    private static extern bool Build_PInvoke(ImFontAtlas* @this);

    [DebuggerStepThrough, DebuggerHidden]
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public unsafe bool Build()
    {
        fixed (ImFontAtlas* @this = &this)
        { return Build_PInvoke(@this); }
    }

    [DllImport("InfectedImGui.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?GetTexDataAsAlpha8@ImFontAtlas@@QEAAXPEAPEAEPEAH11@Z", ExactSpelling = true)]
    private static extern void GetTexDataAsAlpha8_PInvoke(ImFontAtlas* @this, byte** out_pixels, int* out_width, int* out_height, int* out_bytes_per_pixel);

    [DebuggerStepThrough, DebuggerHidden]
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public unsafe void GetTexDataAsAlpha8(byte** out_pixels, int* out_width, int* out_height, int* out_bytes_per_pixel = null)
    {
        fixed (ImFontAtlas* @this = &this)
        { GetTexDataAsAlpha8_PInvoke(@this, out_pixels, out_width, out_height, out_bytes_per_pixel); }
    }

    [DllImport("InfectedImGui.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?GetTexDataAsRGBA32@ImFontAtlas@@QEAAXPEAPEAEPEAH11@Z", ExactSpelling = true)]
    private static extern void GetTexDataAsRGBA32_PInvoke(ImFontAtlas* @this, byte** out_pixels, int* out_width, int* out_height, int* out_bytes_per_pixel);

    [DebuggerStepThrough, DebuggerHidden]
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public unsafe void GetTexDataAsRGBA32(byte** out_pixels, int* out_width, int* out_height, int* out_bytes_per_pixel = null)
    {
        fixed (ImFontAtlas* @this = &this)
        { GetTexDataAsRGBA32_PInvoke(@this, out_pixels, out_width, out_height, out_bytes_per_pixel); }
    }

    [DllImport("InfectedImGui.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?IsBuilt@ImFontAtlas@@QEBA_NXZ", ExactSpelling = true)]
    [return: MarshalAs(UnmanagedType.I1)]
    private static extern bool IsBuilt_PInvoke(ImFontAtlas* @this);

    [DebuggerStepThrough, DebuggerHidden]
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public unsafe bool IsBuilt()
    {
        fixed (ImFontAtlas* @this = &this)
        { return IsBuilt_PInvoke(@this); }
    }

    [DllImport("InfectedImGui.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?SetTexID@ImFontAtlas@@QEAAXPEAX@Z", ExactSpelling = true)]
    private static extern void SetTexID_PInvoke(ImFontAtlas* @this, void* id);

    [DebuggerStepThrough, DebuggerHidden]
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public unsafe void SetTexID(void* id)
    {
        fixed (ImFontAtlas* @this = &this)
        { SetTexID_PInvoke(@this, id); }
    }

    [DllImport("InfectedImGui.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?GetGlyphRangesDefault@ImFontAtlas@@QEAAPEBGXZ", ExactSpelling = true)]
    private static extern ushort* GetGlyphRangesDefault_PInvoke(ImFontAtlas* @this);

    [DebuggerStepThrough, DebuggerHidden]
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public unsafe ushort* GetGlyphRangesDefault()
    {
        fixed (ImFontAtlas* @this = &this)
        { return GetGlyphRangesDefault_PInvoke(@this); }
    }

    [DllImport("InfectedImGui.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?GetGlyphRangesKorean@ImFontAtlas@@QEAAPEBGXZ", ExactSpelling = true)]
    private static extern ushort* GetGlyphRangesKorean_PInvoke(ImFontAtlas* @this);

    [DebuggerStepThrough, DebuggerHidden]
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public unsafe ushort* GetGlyphRangesKorean()
    {
        fixed (ImFontAtlas* @this = &this)
        { return GetGlyphRangesKorean_PInvoke(@this); }
    }

    [DllImport("InfectedImGui.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?GetGlyphRangesJapanese@ImFontAtlas@@QEAAPEBGXZ", ExactSpelling = true)]
    private static extern ushort* GetGlyphRangesJapanese_PInvoke(ImFontAtlas* @this);

    [DebuggerStepThrough, DebuggerHidden]
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public unsafe ushort* GetGlyphRangesJapanese()
    {
        fixed (ImFontAtlas* @this = &this)
        { return GetGlyphRangesJapanese_PInvoke(@this); }
    }

    [DllImport("InfectedImGui.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?GetGlyphRangesChineseFull@ImFontAtlas@@QEAAPEBGXZ", ExactSpelling = true)]
    private static extern ushort* GetGlyphRangesChineseFull_PInvoke(ImFontAtlas* @this);

    [DebuggerStepThrough, DebuggerHidden]
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public unsafe ushort* GetGlyphRangesChineseFull()
    {
        fixed (ImFontAtlas* @this = &this)
        { return GetGlyphRangesChineseFull_PInvoke(@this); }
    }

    [DllImport("InfectedImGui.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?GetGlyphRangesChineseSimplifiedCommon@ImFontAtlas@@QEAAPEBGXZ", ExactSpelling = true)]
    private static extern ushort* GetGlyphRangesChineseSimplifiedCommon_PInvoke(ImFontAtlas* @this);

    [DebuggerStepThrough, DebuggerHidden]
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public unsafe ushort* GetGlyphRangesChineseSimplifiedCommon()
    {
        fixed (ImFontAtlas* @this = &this)
        { return GetGlyphRangesChineseSimplifiedCommon_PInvoke(@this); }
    }

    [DllImport("InfectedImGui.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?GetGlyphRangesCyrillic@ImFontAtlas@@QEAAPEBGXZ", ExactSpelling = true)]
    private static extern ushort* GetGlyphRangesCyrillic_PInvoke(ImFontAtlas* @this);

    [DebuggerStepThrough, DebuggerHidden]
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public unsafe ushort* GetGlyphRangesCyrillic()
    {
        fixed (ImFontAtlas* @this = &this)
        { return GetGlyphRangesCyrillic_PInvoke(@this); }
    }

    [DllImport("InfectedImGui.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?GetGlyphRangesThai@ImFontAtlas@@QEAAPEBGXZ", ExactSpelling = true)]
    private static extern ushort* GetGlyphRangesThai_PInvoke(ImFontAtlas* @this);

    [DebuggerStepThrough, DebuggerHidden]
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public unsafe ushort* GetGlyphRangesThai()
    {
        fixed (ImFontAtlas* @this = &this)
        { return GetGlyphRangesThai_PInvoke(@this); }
    }

    [DllImport("InfectedImGui.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?GetGlyphRangesVietnamese@ImFontAtlas@@QEAAPEBGXZ", ExactSpelling = true)]
    private static extern ushort* GetGlyphRangesVietnamese_PInvoke(ImFontAtlas* @this);

    [DebuggerStepThrough, DebuggerHidden]
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public unsafe ushort* GetGlyphRangesVietnamese()
    {
        fixed (ImFontAtlas* @this = &this)
        { return GetGlyphRangesVietnamese_PInvoke(@this); }
    }

    [DllImport("InfectedImGui.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?AddCustomRectRegular@ImFontAtlas@@QEAAHHH@Z", ExactSpelling = true)]
    private static extern int AddCustomRectRegular_PInvoke(ImFontAtlas* @this, int width, int height);

    [DebuggerStepThrough, DebuggerHidden]
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public unsafe int AddCustomRectRegular(int width, int height)
    {
        fixed (ImFontAtlas* @this = &this)
        { return AddCustomRectRegular_PInvoke(@this, width, height); }
    }

    [DllImport("InfectedImGui.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?AddCustomRectFontGlyph@ImFontAtlas@@QEAAHPEAUImFont@@GHHMAEBUImVec2@@@Z", ExactSpelling = true)]
    private static extern int AddCustomRectFontGlyph_PInvoke(ImFontAtlas* @this, ImFont* font, ushort id, int width, int height, float advance_x, ImVec2* offset);

    [DebuggerStepThrough, DebuggerHidden]
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public unsafe int AddCustomRectFontGlyph(ImFont* font, ushort id, int width, int height, float advance_x, ImVec2* offset)
    {
        fixed (ImFontAtlas* @this = &this)
        { return AddCustomRectFontGlyph_PInvoke(@this, font, id, width, height, advance_x, offset); }
    }

    [DllImport("InfectedImGui.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?GetCustomRectByIndex@ImFontAtlas@@QEAAPEAUImFontAtlasCustomRect@@H@Z", ExactSpelling = true)]
    private static extern ImFontAtlasCustomRect* GetCustomRectByIndex_PInvoke(ImFontAtlas* @this, int index);

    [DebuggerStepThrough, DebuggerHidden]
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public unsafe ImFontAtlasCustomRect* GetCustomRectByIndex(int index)
    {
        fixed (ImFontAtlas* @this = &this)
        { return GetCustomRectByIndex_PInvoke(@this, index); }
    }

    [DllImport("InfectedImGui.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?CalcCustomRectUV@ImFontAtlas@@QEBAXPEBUImFontAtlasCustomRect@@PEAUImVec2@@1@Z", ExactSpelling = true)]
    private static extern void CalcCustomRectUV_PInvoke(ImFontAtlas* @this, ImFontAtlasCustomRect* rect, ImVec2* out_uv_min, ImVec2* out_uv_max);

    [DebuggerStepThrough, DebuggerHidden]
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public unsafe void CalcCustomRectUV(ImFontAtlasCustomRect* rect, ImVec2* out_uv_min, ImVec2* out_uv_max)
    {
        fixed (ImFontAtlas* @this = &this)
        { CalcCustomRectUV_PInvoke(@this, rect, out_uv_min, out_uv_max); }
    }

    [DllImport("InfectedImGui.Native.dll", CallingConvention = CallingConvention.Cdecl, EntryPoint = "?GetMouseCursorTexData@ImFontAtlas@@QEAA_NHPEAUImVec2@@0QEAU2@1@Z", ExactSpelling = true)]
    [return: MarshalAs(UnmanagedType.I1)]
    private static extern bool GetMouseCursorTexData_PInvoke(ImFontAtlas* @this, ImGuiMouseCursor cursor, ImVec2* out_offset, ImVec2* out_size, ConstantArray_ImVec2_2* out_uv_border, ConstantArray_ImVec2_2* out_uv_fill);

    [DebuggerStepThrough, DebuggerHidden]
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public unsafe bool GetMouseCursorTexData(ImGuiMouseCursor cursor, ImVec2* out_offset, ImVec2* out_size, ConstantArray_ImVec2_2* out_uv_border, ConstantArray_ImVec2_2* out_uv_fill)
    {
        fixed (ImFontAtlas* @this = &this)
        { return GetMouseCursorTexData_PInvoke(@this, cursor, out_offset, out_size, out_uv_border, out_uv_fill); }
    }

    [FieldOffset(0)] [MarshalAs(UnmanagedType.I1)] public bool Locked;

    [FieldOffset(4)] public ImFontAtlasFlags Flags;

    [FieldOffset(8)] public void* TexID;

    [FieldOffset(16)] public int TexDesiredWidth;

    [FieldOffset(20)] public int TexGlyphPadding;

    [FieldOffset(24)] public byte* TexPixelsAlpha8;

    [FieldOffset(32)] public uint* TexPixelsRGBA32;

    [FieldOffset(40)] public int TexWidth;

    [FieldOffset(44)] public int TexHeight;

    [FieldOffset(48)] public ImVec2 TexUvScale;

    [FieldOffset(56)] public ImVec2 TexUvWhitePixel;

    [FieldOffset(64)] public ImVector<Pointer<ImFont>> Fonts;

    [FieldOffset(80)] public ImVector<ImFontAtlasCustomRect> CustomRects;

    [FieldOffset(96)] public ImVector<ImFontConfig> ConfigData;

    [FieldOffset(112)] public ConstantArray_ImVec4_64 TexUvLines;

    [FieldOffset(1136)] public ImFontBuilderIO* FontBuilderIO;

    [FieldOffset(1144)] public uint FontBuilderFlags;

    [FieldOffset(1148)] public int PackIdMouseCursors;

    [FieldOffset(1152)] public int PackIdLines;
}
