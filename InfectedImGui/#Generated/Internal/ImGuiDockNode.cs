// <auto-generated>
// This file was automatically generated by Biohazrd and should not be modified by hand!
// </auto-generated>
#nullable enable
using InfectedImGui.Infrastructure;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace InfectedImGui.Internal
{
    [StructLayout(LayoutKind.Explicit, Size = 192)]
    public unsafe partial struct ImGuiDockNode
    {
        [FieldOffset(0)] public uint ID;

        [FieldOffset(4)] public ImGuiDockNodeFlags SharedFlags;

        [FieldOffset(8)] public ImGuiDockNodeFlags LocalFlags;

        [FieldOffset(12)] public ImGuiDockNodeState State;

        [FieldOffset(16)] public ImGuiDockNode* ParentNode;

        [FieldOffset(24)] public ConstantArray_ImGuiDockNode__UNICODE_0020____UNICODE_002A___2 ChildNodes;

        [FieldOffset(40)] public ImVector<Pointer<ImGuiWindow>> Windows;

        [FieldOffset(56)] public ImGuiTabBar* TabBar;

        [FieldOffset(64)] public ImVec2 Pos;

        [FieldOffset(72)] public ImVec2 Size;

        [FieldOffset(80)] public ImVec2 SizeRef;

        [FieldOffset(88)] public ImGuiAxis SplitAxis;

        [FieldOffset(92)] public ImGuiWindowClass WindowClass;

        [FieldOffset(128)] public ImGuiWindow* HostWindow;

        [FieldOffset(136)] public ImGuiWindow* VisibleWindow;

        [FieldOffset(144)] public ImGuiDockNode* CentralNode;

        [FieldOffset(152)] public ImGuiDockNode* OnlyNodeWithWindows;

        [FieldOffset(160)] public int LastFrameAlive;

        [FieldOffset(164)] public int LastFrameActive;

        [FieldOffset(168)] public int LastFrameFocused;

        [FieldOffset(172)] public uint LastFocusedNodeId;

        [FieldOffset(176)] public uint SelectedTabId;

        [FieldOffset(180)] public uint WantCloseTabId;

        [FieldOffset(184)] private uint __AuthorityForPos__backingField;
        public ImGuiDataAuthority AuthorityForPos
        {
            get => (ImGuiDataAuthority)((__AuthorityForPos__backingField >> 0) & 0x7U);
            set
            {
                uint shiftedValue = (((uint)value) & 0x7U) << 0;
                uint otherBits = __AuthorityForPos__backingField & 0xFFFFFFF8U;
                __AuthorityForPos__backingField = otherBits | shiftedValue;
            }
        }

        [FieldOffset(184)] private uint __AuthorityForSize__backingField;
        public ImGuiDataAuthority AuthorityForSize
        {
            get => (ImGuiDataAuthority)((__AuthorityForSize__backingField >> 3) & 0x7U);
            set
            {
                uint shiftedValue = (((uint)value) & 0x7U) << 3;
                uint otherBits = __AuthorityForSize__backingField & 0xFFFFFFC7U;
                __AuthorityForSize__backingField = otherBits | shiftedValue;
            }
        }

        [FieldOffset(184)] private uint __AuthorityForViewport__backingField;
        public ImGuiDataAuthority AuthorityForViewport
        {
            get => (ImGuiDataAuthority)((__AuthorityForViewport__backingField >> 6) & 0x7U);
            set
            {
                uint shiftedValue = (((uint)value) & 0x7U) << 6;
                uint otherBits = __AuthorityForViewport__backingField & 0xFFFFFE3FU;
                __AuthorityForViewport__backingField = otherBits | shiftedValue;
            }
        }

        [FieldOffset(185)] private byte __IsVisible__backingField;
        public bool IsVisible
        {
            get => ((__IsVisible__backingField >> 1) & 0x1U) != 0;
            set
            {
                uint shiftedValue = ((value ? 1U : 0U) & 0x1U) << 1;
                uint otherBits = __IsVisible__backingField & 0xFDU;
                __IsVisible__backingField = (byte)(otherBits | shiftedValue);
            }
        }

        [FieldOffset(185)] private byte __IsFocused__backingField;
        public bool IsFocused
        {
            get => ((__IsFocused__backingField >> 2) & 0x1U) != 0;
            set
            {
                uint shiftedValue = ((value ? 1U : 0U) & 0x1U) << 2;
                uint otherBits = __IsFocused__backingField & 0xFBU;
                __IsFocused__backingField = (byte)(otherBits | shiftedValue);
            }
        }

        [FieldOffset(185)] private byte __HasCloseButton__backingField;
        public bool HasCloseButton
        {
            get => ((__HasCloseButton__backingField >> 3) & 0x1U) != 0;
            set
            {
                uint shiftedValue = ((value ? 1U : 0U) & 0x1U) << 3;
                uint otherBits = __HasCloseButton__backingField & 0xF7U;
                __HasCloseButton__backingField = (byte)(otherBits | shiftedValue);
            }
        }

        [FieldOffset(185)] private byte __HasWindowMenuButton__backingField;
        public bool HasWindowMenuButton
        {
            get => ((__HasWindowMenuButton__backingField >> 4) & 0x1U) != 0;
            set
            {
                uint shiftedValue = ((value ? 1U : 0U) & 0x1U) << 4;
                uint otherBits = __HasWindowMenuButton__backingField & 0xEFU;
                __HasWindowMenuButton__backingField = (byte)(otherBits | shiftedValue);
            }
        }

        [FieldOffset(185)] private byte __WantCloseAll__backingField;
        public bool WantCloseAll
        {
            get => ((__WantCloseAll__backingField >> 5) & 0x1U) != 0;
            set
            {
                uint shiftedValue = ((value ? 1U : 0U) & 0x1U) << 5;
                uint otherBits = __WantCloseAll__backingField & 0xDFU;
                __WantCloseAll__backingField = (byte)(otherBits | shiftedValue);
            }
        }

        [FieldOffset(185)] private byte __WantLockSizeOnce__backingField;
        public bool WantLockSizeOnce
        {
            get => ((__WantLockSizeOnce__backingField >> 6) & 0x1U) != 0;
            set
            {
                uint shiftedValue = ((value ? 1U : 0U) & 0x1U) << 6;
                uint otherBits = __WantLockSizeOnce__backingField & 0xBFU;
                __WantLockSizeOnce__backingField = (byte)(otherBits | shiftedValue);
            }
        }

        [FieldOffset(185)] private byte __WantMouseMove__backingField;
        public bool WantMouseMove
        {
            get => ((__WantMouseMove__backingField >> 7) & 0x1U) != 0;
            set
            {
                uint shiftedValue = ((value ? 1U : 0U) & 0x1U) << 7;
                uint otherBits = __WantMouseMove__backingField & 0x7FU;
                __WantMouseMove__backingField = (byte)(otherBits | shiftedValue);
            }
        }

        [FieldOffset(186)] private byte __WantHiddenTabBarUpdate__backingField;
        public bool WantHiddenTabBarUpdate
        {
            get => ((__WantHiddenTabBarUpdate__backingField >> 0) & 0x1U) != 0;
            set
            {
                uint shiftedValue = ((value ? 1U : 0U) & 0x1U) << 0;
                uint otherBits = __WantHiddenTabBarUpdate__backingField & 0xFEU;
                __WantHiddenTabBarUpdate__backingField = (byte)(otherBits | shiftedValue);
            }
        }

        [FieldOffset(186)] private byte __WantHiddenTabBarToggle__backingField;
        public bool WantHiddenTabBarToggle
        {
            get => ((__WantHiddenTabBarToggle__backingField >> 1) & 0x1U) != 0;
            set
            {
                uint shiftedValue = ((value ? 1U : 0U) & 0x1U) << 1;
                uint otherBits = __WantHiddenTabBarToggle__backingField & 0xFDU;
                __WantHiddenTabBarToggle__backingField = (byte)(otherBits | shiftedValue);
            }
        }

        [FieldOffset(186)] private byte __MarkedForPosSizeWrite__backingField;
        public bool MarkedForPosSizeWrite
        {
            get => ((__MarkedForPosSizeWrite__backingField >> 2) & 0x1U) != 0;
            set
            {
                uint shiftedValue = ((value ? 1U : 0U) & 0x1U) << 2;
                uint otherBits = __MarkedForPosSizeWrite__backingField & 0xFBU;
                __MarkedForPosSizeWrite__backingField = (byte)(otherBits | shiftedValue);
            }
        }

        [DllImport("libInfectedImGui.Native.so", CallingConvention = CallingConvention.Cdecl, EntryPoint = "_ZN13ImGuiDockNodeC1Ej", ExactSpelling = true)]
        private static extern void Constructor_PInvoke(ImGuiDockNode* @this, uint id);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Constructor(uint id)
        {
            fixed (ImGuiDockNode* @this = &this)
            { Constructor_PInvoke(@this, id); }
        }

        [DllImport("libInfectedImGui.Native.so", CallingConvention = CallingConvention.Cdecl, EntryPoint = "_ZN13ImGuiDockNodeD2Ev", ExactSpelling = true)]
        private static extern void Destructor_PInvoke(ImGuiDockNode* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void Destructor()
        {
            fixed (ImGuiDockNode* @this = &this)
            { Destructor_PInvoke(@this); }
        }

        [DllImport("libInfectedImGui.Native.so", CallingConvention = CallingConvention.Cdecl, EntryPoint = "_ZNK13ImGuiDockNode10IsRootNodeEv", ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.I1)]
        private static extern bool IsRootNode_PInvoke(ImGuiDockNode* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool IsRootNode()
        {
            fixed (ImGuiDockNode* @this = &this)
            { return IsRootNode_PInvoke(@this); }
        }

        [DllImport("libInfectedImGui.Native.so", CallingConvention = CallingConvention.Cdecl, EntryPoint = "_ZNK13ImGuiDockNode11IsDockSpaceEv", ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.I1)]
        private static extern bool IsDockSpace_PInvoke(ImGuiDockNode* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool IsDockSpace()
        {
            fixed (ImGuiDockNode* @this = &this)
            { return IsDockSpace_PInvoke(@this); }
        }

        [DllImport("libInfectedImGui.Native.so", CallingConvention = CallingConvention.Cdecl, EntryPoint = "_ZNK13ImGuiDockNode14IsFloatingNodeEv", ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.I1)]
        private static extern bool IsFloatingNode_PInvoke(ImGuiDockNode* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool IsFloatingNode()
        {
            fixed (ImGuiDockNode* @this = &this)
            { return IsFloatingNode_PInvoke(@this); }
        }

        [DllImport("libInfectedImGui.Native.so", CallingConvention = CallingConvention.Cdecl, EntryPoint = "_ZNK13ImGuiDockNode13IsCentralNodeEv", ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.I1)]
        private static extern bool IsCentralNode_PInvoke(ImGuiDockNode* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool IsCentralNode()
        {
            fixed (ImGuiDockNode* @this = &this)
            { return IsCentralNode_PInvoke(@this); }
        }

        [DllImport("libInfectedImGui.Native.so", CallingConvention = CallingConvention.Cdecl, EntryPoint = "_ZNK13ImGuiDockNode14IsHiddenTabBarEv", ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.I1)]
        private static extern bool IsHiddenTabBar_PInvoke(ImGuiDockNode* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool IsHiddenTabBar()
        {
            fixed (ImGuiDockNode* @this = &this)
            { return IsHiddenTabBar_PInvoke(@this); }
        }

        [DllImport("libInfectedImGui.Native.so", CallingConvention = CallingConvention.Cdecl, EntryPoint = "_ZNK13ImGuiDockNode10IsNoTabBarEv", ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.I1)]
        private static extern bool IsNoTabBar_PInvoke(ImGuiDockNode* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool IsNoTabBar()
        {
            fixed (ImGuiDockNode* @this = &this)
            { return IsNoTabBar_PInvoke(@this); }
        }

        [DllImport("libInfectedImGui.Native.so", CallingConvention = CallingConvention.Cdecl, EntryPoint = "_ZNK13ImGuiDockNode11IsSplitNodeEv", ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.I1)]
        private static extern bool IsSplitNode_PInvoke(ImGuiDockNode* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool IsSplitNode()
        {
            fixed (ImGuiDockNode* @this = &this)
            { return IsSplitNode_PInvoke(@this); }
        }

        [DllImport("libInfectedImGui.Native.so", CallingConvention = CallingConvention.Cdecl, EntryPoint = "_ZNK13ImGuiDockNode10IsLeafNodeEv", ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.I1)]
        private static extern bool IsLeafNode_PInvoke(ImGuiDockNode* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool IsLeafNode()
        {
            fixed (ImGuiDockNode* @this = &this)
            { return IsLeafNode_PInvoke(@this); }
        }

        [DllImport("libInfectedImGui.Native.so", CallingConvention = CallingConvention.Cdecl, EntryPoint = "_ZNK13ImGuiDockNode7IsEmptyEv", ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.I1)]
        private static extern bool IsEmpty_PInvoke(ImGuiDockNode* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool IsEmpty()
        {
            fixed (ImGuiDockNode* @this = &this)
            { return IsEmpty_PInvoke(@this); }
        }

        [DllImport("libInfectedImGui.Native.so", CallingConvention = CallingConvention.Cdecl, EntryPoint = "_ZNK13ImGuiDockNode14GetMergedFlagsEv", ExactSpelling = true)]
        private static extern ImGuiDockNodeFlags GetMergedFlags_PInvoke(ImGuiDockNode* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ImGuiDockNodeFlags GetMergedFlags()
        {
            fixed (ImGuiDockNode* @this = &this)
            { return GetMergedFlags_PInvoke(@this); }
        }

        [DllImport("libInfectedImGui.Native.so", CallingConvention = CallingConvention.Cdecl, EntryPoint = "_ZNK13ImGuiDockNode4RectEv", ExactSpelling = true)]
        private static extern ImRect Rect_PInvoke(ImGuiDockNode* @this);

        [DebuggerStepThrough, DebuggerHidden]
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ImRect Rect()
        {
            fixed (ImGuiDockNode* @this = &this)
            { return Rect_PInvoke(@this); }
        }
    }
}
